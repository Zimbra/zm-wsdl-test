<project name="zm-wsdl-test" default="test" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Sole purpose of this repo is to test Zimbra's WSDL support.
         Zimbra MUST be fully installed on the same host.
    -->
    <!-- Set properties that can be used in all projects. -->
    <dirname property="zimbra.root.dir" file="${ant.file.ant-global}/../"/>
    <!-- Java -->
    <property name="javac.target" value="1.8"/>
    <!-- base path for ivy cache, local repository, ant libraries, etc -->

    <property name="dev.home"  value="${user.home}"/>

    <!-- Add "init-ivy" depends to your "resolve" target and the following will
         automatically download and install ivy if necessary. -->
    <property name="ivy.jar.dir" location="${dev.home}/.ant/lib" />
    <property name="ivy.install.version" value="2.3.0" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-2.3.0.jar" />
    <property name="ivy.status" value="integration" />
    <property name="ivy.organisation" value="zimbra" />
    <property name="ivy.publish.src.artifacts.pattern" value="build/[artifact]-[revision].[ext]" />
    <property name="ivy.deliver.ivy.pattern" value="${dev.home}/.zcs-deps/[organisation]/[module]/[module]-[revision].[ext]" />
    <property name="ivy.module" value="${ant.project.name}" />
    <target name="download-ivy">
      <if>
        <not>
          <available file="${ivy.jar.file}" type="file"/>
        </not>
        <then>
          <mkdir dir="${ivy.jar.dir}"/>
          <!-- download Ivy from web site so that it can be used even without any special installation. 
             Note, that 'get' task will not try downloading if this file is already downloaded. -->
          <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>  
        </then>
      </if>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- If ivy is not downloaded yet, try to load ivy here from ivy home. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:settings id="dev.settings" file="ivysettings.xml"/>
    </target>

    <!-- common resolve target that should work to resolve dependencies based on ivy.xml for most projects -->
    <target name="resolve" depends="init-ivy" description="resolve dependencies">
      <ivy:resolve settingsRef="dev.settings" />
      <ivy:cachepath pathid="class.path" />
    </target>

    <!-- Ignore the classpath from the shell running ant.  This avoids dependency
      on the user's environment and suppresses the warning about includeAntRuntime. -->
    <property name="build.sysclasspath" value="ignore"/>

    <!-- Standard directory paths -->
    <property name="src.dir" location="src" />
    <property name="src.java.dir" location="src/java" />
    <property name="src.bin.dir" location="src/bin" />
    <property name="jars.dir" location="jars" />
    <property name="build.dir" location="build" />
    <property name="build.tmp.dir" location="${build.dir}/tmp" />
    <property name="build.classes.dir" location="${build.dir}/classes" />
    <property name="test.dir" location="${build.dir}/test"/>
    <property name="test.src.dir" location="src/java-test"/>
    <property name="test.classes.dir" location="${build.dir}/test-classes"/>

    <path id="all.java.path">
        <pathelement location="${src.java.dir}" />
    </path>
    <!-- Standard build dependencies path -->
    <property name="build.deps.dir" location="${dev.home}/.zcs-deps"/>

    <!-- Classpath for running unit test, it needs classes from build dir -->
    <path id="test.class.path">
      <path refid="class.path"/>
      <pathelement location="${build.classes.dir}" />
      <pathelement location="${test.classes.dir}" />
    </path>

    <!-- Build version -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${build.deps.dir}/ant-contrib-1.0b1.jar"/>
        </classpath>
    </taskdef>
    <tstamp/>

    <target name="build-init">
      <mkdir dir="${build.classes.dir}"/>
    </target>

    <target name="test-compile" depends="compile">
      <if>
        <available file="${test.src.dir}" type="dir"/>
        <then>
          <mkdir dir="${test.classes.dir}"/>
            <javac destdir="${test.classes.dir}" srcdir="${test.src.dir}" classpathref="test.class.path"
               debug="true" target="${javac.target}" encoding="utf-8" />
            <copy todir="${test.classes.dir}">
              <fileset dir="${test.src.dir}" excludes="**/*.java"/>
            </copy>
         </then>
      </if>
    </target>

    <target name="test" depends="test-compile" description="Run unit tests">
      <if>
        <available file="${test.src.dir}" type="dir"/>
        <then>
          <property name="test.path" refid="test.class.path"/>
          <delete dir="${test.dir}" quiet="true"/>
          <mkdir dir="${test.dir}/output"/>
          <mkdir dir="${test.dir}/report"/>
          <copy file="${test.src.dir}/log4j-test.properties" tofile="${test.classes.dir}/log4j.properties" failonerror="false"/>
          <junit printsummary="on" showoutput="true" failureproperty="junit.failure" tempdir="${test.dir}" fork="true">
            <classpath refid="test.class.path"/>
            <assertions><enable/></assertions>
            <formatter type="xml"/>
            <batchtest todir="${test.dir}/output">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*ITest.java"/>
                    <exclude name="**/Abstract*Test.java"/>
                </fileset>
            </batchtest>
          </junit>
          <junitreport todir="${test.dir}/report">
            <fileset dir="${test.dir}/output"/>
            <report todir="${test.dir}/report"/>
          </junitreport>
          <echo>Test Report: ${test.dir}/report/index.html</echo>
          <fail if="junit.failure" message="Unit test failed"/>
        </then>
        <else>
          <echo>${test.src.dir} not found. Will not run unit tests</echo>
        </else>
      </if>
    </target>

    <target name="single-test" depends="test-compile" description="Run single unit test">
        <fail message="test.name must be set - Need e.g. ant -Dtest.name=com.zimbra.soap.WSDLJaxbTest single-test"
              unless="test.name"/>
        <property name="single.test.dir" value="${test.dir}-${test.name}"/>
        <delete dir="${single.test.dir}" quiet="true"/>
        <mkdir dir="${single.test.dir}/output"/>
        <mkdir dir="${single.test.dir}/report"/>
        <copy file="${test.src.dir}/log4j-test.properties" tofile="${test.classes.dir}/log4j.properties" failonerror="false"/>
        <junit fork="yes" printsummary="on" showoutput="true" failureproperty="junit.failure" tempdir="${single.test.dir}">
            <classpath refid="test.class.path"/>
            <assertions><enable/></assertions>
            <formatter type="xml"/>
            <test name="${test.name}" todir="${single.test.dir}/output" />
        </junit>
        <junitreport todir="${single.test.dir}/report">
            <fileset dir="${single.test.dir}/output"/>
            <report todir="${single.test.dir}/report"/>
        </junitreport>
        <echo>Test Report: ${single.test.dir}/report/index.html</echo>
        <fail if="junit.failure" message="Single Unit test failed"/>
    </target>

    <target name="clean-cache" description="Delete ivy cache">
        <delete dir="${dev.home}/.ivy2/cache/zimbra/${ant.project.name}"/>
        <delete dir="${dev.home}/.zcs-deps/zimbra/${ant.project.name}"/>
        <delete>
            <fileset dir="${dev.home}/.ivy2/cache" includes="*${ant.project.name}*"/>
        </delete>
    </target>

  <!-- implementation.title is used by the "zimbra-jar" target -->
  <property name="implementation.title" value="zm-wsdl-test"/>
  <property name="jar.file" value="zm-wsdl-test.jar"/>
  <property name="generated.src.dir" value="${src.java.dir}/generated/zcsclient"/>
  <property name="tools.src.dir" value="src/tools"/>
  <property name="tools.dir" value="${build.dir}/tools"/>
  <property name="tools.classes.dir" value="${tools.dir}/classes"/>
  <property name="bindings.src.dir" value="bindings"/>
  <property name="bindings.dir" value="${build.dir}/bindings"/>
  <property name="soap.server" value="zmc-mailbox"/> <!-- will probably want to over-ride this -->
  <property name="admin.port" value="7071"/>

  <target name="init-url">
    <property name="wsdl.src.uri.base" value="https://${soap.server}:${admin.port}/service/wsdl"/>
    <property name="wsdl.file" value="${wsdl.src.uri.base}/ZimbraService.wsdl"/>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${src.java.dir}"/>
  </target>

  <target name="resolve-cxf" depends="init-ivy" description="resolve javatool dependencies">
    <property name="ivy.settings.file" value="ivysettings.xml"/>
    <ivy:resolve file="ivy-cxf.xml"/>
    <ivy:cachepath pathid="cxf.classpath"/>
  </target>

  <target name="make-bindings" depends="build-init,check-bindings-present,init-url" unless="bindings.present" description="Create Bindings files">
    <mkdir dir="${bindings.dir}"/>
    <copy todir="${bindings.dir}">
      <fileset dir="${bindings.src.dir}" includes="*.xml"/>
    </copy>
    <replace file="${bindings.dir}/xsdBindings-zcs.xml" token="@@URI@@" value="${wsdl.src.uri.base}" summary="true" failOnNoReplacements="true"/>
  </target>

  <target name="check-bindings-present">
    <available file="${bindings.dir}/xsdBindings-zcs.xml" property="bindings.present"/>
  </target>

  <!-- See https://cxf.apache.org/docs/wsdl-to-java.html
       WSDLToJavaWrapper is a simple wrapper for org.apache.cxf.tools.wsdlto.WSDLToJava,
       whose "main" method is called after setting things up to ignore SSL certificate issues.
       This shouldn't really be needed but some of our test systems use self signed certificates, which
       cause problems here because we don't automatically trust those.  -->
  <target name="generate-test-source" depends="resolve-cxf,check-src-generated,tools-compile,make-bindings" unless="src.generated">
    <java classname="com.zimbra.wsdlto.WSDLToJavaWrapper" failonerror="true" fork="true">
      <arg value="-client"/>
      <arg value="-b"/>
      <arg value="${bindings.dir}/wsdlBindings-zcs.xml"/>
      <arg value="-b"/>
      <arg value="${bindings.dir}/xsdBindings-zcs.xml"/>
      <arg value="-d"/>
      <arg value="${src.java.dir}"/>
      <arg value="${wsdl.file}"/>
      <classpath>
        <pathelement location="${tools.classes.dir}"/>
        <path refid="cxf.classpath"/>
      </classpath>
    </java>
  </target>

  <target name="check-src-generated" depends="make-bindings">
    <available property="src.generated" file="${generated.src.dir}/ws/service/ZcsAdminService.java"/>
  </target>

  <!-- Based on ant-global target but also depends on target to generate source code -->
  <target name="compile" depends="generate-test-source,build-init,resolve" description="Compiles src/java to build/classes">
    <mkdir dir="${build.classes.dir}"/>
    <javac destdir="${build.classes.dir}" debug="true" classpathref="class.path" target="${javac.target}">
      <src refid="all.java.path"/>
    </javac>
  </target>

  <target name="tools-compile" depends="resolve-cxf">
    <mkdir dir="${tools.classes.dir}"/>
    <javac srcdir="${tools.src.dir}" destdir="${tools.classes.dir}" debug="true" classpathref="cxf.classpath" target="${javac.target}"/>
  </target>

  <target name="check-zimbra-identity">
    <available file="/opt/zimbra/.ssh/zimbra_identity" property="ssh.zimbra.identity.present"/>
  </target>

  <target name="zimbra-identity" depends="check-zimbra-identity" unless="ssh.zimbra.identity.present">
    <exec failonerror="false" executable="/opt/zimbra/bin/zmsshkeygen"/>
  </target>

  <target name="jar" depends="compile" description="Creates the jar">
            <jar destfile="${build.dir}/${jar.file}" basedir="${jar.build.dir}" includes="${includes}" excludes="${excludes}">
                <manifest>
                    <attribute name="Main-Class" value="com.zimbra.buildinfo.Version" />
                    <attribute name="Implementation-Vendor" value="Zimbra Software, LLC"/>
                    <attribute name="Implementation-Title" value="${implementation.title}"/>
                    <attribute name="Implementation-Version" value="${zimbra.buildinfo.version}"/>
                    <attribute name="Specification-Vendor" value="Zimbra Software, LLC"/>
                    <attribute name="Specification-Title" value="Zimbra Collaboration Suite"/>
                    <attribute name="Specification-Version" value="${zimbra.buildinfo.majorversion}.${zimbra.buildinfo.minorversion}.${zimbra.buildinfo.microversion}"/>
                </manifest>
            </jar>
  </target>
</project>
