<project name="zm-wsdl-test" default="test" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Sole purpose of this repo is to test Zimbra's WSDL support.
         Zimbra MUST be fully installed on the same host.
    -->
  <import file="../zm-zcs/ant-global.xml"/>

  <!-- implementation.title is used by the "zimbra-jar" target -->
  <property name="implementation.title" value="zm-wsdl-test"/>
  <property name="jar.file" value="zm-wsdl-test.jar"/>
  <property name="generated.src.dir" value="${src.java.dir}/generated/zcsclient"/>
  <property name="tools.src.dir" value="src/tools"/>
  <property name="tools.dir" value="${build.dir}/tools"/>
  <property name="tools.classes.dir" value="${tools.dir}/classes"/>
  <property name="bindings.src.dir" value="bindings"/>
  <property name="bindings.dir" value="${build.dir}/bindings"/>

  <target name="init-url">
    <exec executable="/opt/zimbra/bin/zmlocalconfig" outputproperty="soap.server" errorproperty="soap.server.err" failonerror="true">
      <arg line="-m"/>
      <arg line="nokey"/>
      <arg line="zimbra_zmprov_default_soap_server"/>
    </exec>
    <exec executable="/opt/zimbra/bin/zmlocalconfig" outputproperty="admin.port" errorproperty="admin.port.err" failonerror="true">
      <arg line="-m"/>
      <arg line="nokey"/>
      <arg line="zimbra_admin_service_port"/>
    </exec>
    <property name="wsdl.src.uri.base" value="https://${soap.server}:${admin.port}/service/wsdl"/>
    <property name="wsdl.file" value="${wsdl.src.uri.base}/ZimbraService.wsdl"/>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${src.java.dir}"/>
  </target>

  <target name="resolve-cxf" depends="init-ivy" description="resolve javatool dependencies">
    <property name="ivy.settings.file" value="../zm-zcs/ivysettings.xml"/>
    <ivy:resolve file="ivy-cxf.xml"/>
    <ivy:cachepath pathid="cxf.classpath"/>
  </target>

  <target name="make-bindings" depends="build-init,check-bindings-present,init-url" unless="bindings.present" description="Create Bindings files">
    <mkdir dir="${bindings.dir}"/>
    <copy todir="${bindings.dir}">
      <fileset dir="${bindings.src.dir}" includes="*.xml"/>
    </copy>
    <replace file="${bindings.dir}/xsdBindings-zcs.xml" token="@@URI@@" value="${wsdl.src.uri.base}" summary="true" failOnNoReplacements="true"/>
  </target>

  <target name="check-bindings-present">
    <available file="${bindings.dir}/xsdBindings-zcs.xml" property="bindings.present"/>
  </target>

  <!-- See https://cxf.apache.org/docs/wsdl-to-java.html
       WSDLToJavaWrapper is a simple wrapper for org.apache.cxf.tools.wsdlto.WSDLToJava,
       whose "main" method is called after setting things up to ignore SSL certificate issues.
       This shouldn't really be needed but some of our test systems use self signed certificates, which
       cause problems here because we don't automatically trust those.  -->
  <target name="generate-test-source" depends="resolve-cxf,check-src-generated,tools-compile,make-bindings" unless="src.generated">
    <java classname="com.zimbra.wsdlto.WSDLToJavaWrapper" failonerror="true" fork="true">
      <arg value="-client"/>
      <arg value="-b"/>
      <arg value="${bindings.dir}/wsdlBindings-zcs.xml"/>
      <arg value="-b"/>
      <arg value="${bindings.dir}/xsdBindings-zcs.xml"/>
      <arg value="-d"/>
      <arg value="${src.java.dir}"/>
      <arg value="${wsdl.file}"/>
      <classpath>
        <pathelement location="${tools.classes.dir}"/>
        <path refid="cxf.classpath"/>
      </classpath>
    </java>
  </target>

  <target name="check-src-generated" depends="make-bindings">
    <available property="src.generated" file="${generated.src.dir}/ws/service/ZcsAdminService.java"/>
  </target>

  <!-- Based on ant-global target but also depends on target to generate source code -->
  <target name="compile" depends="generate-test-source,build-init,resolve" description="Compiles src/java to build/classes">
    <mkdir dir="${build.classes.dir}"/>
    <javac destdir="${build.classes.dir}" debug="true" classpathref="class.path" target="${javac.target}">
      <src refid="all.java.path"/>
    </javac>
  </target>

  <target name="tools-compile" depends="resolve-cxf">
    <mkdir dir="${tools.classes.dir}"/>
    <javac srcdir="${tools.src.dir}" destdir="${tools.classes.dir}" debug="true" classpathref="cxf.classpath" target="${javac.target}"/>
  </target>

  <target name="check-zimbra-identity">
    <available file="/opt/zimbra/.ssh/zimbra_identity" property="ssh.zimbra.identity.present"/>
  </target>

  <target name="zimbra-identity" depends="check-zimbra-identity" unless="ssh.zimbra.identity.present">
    <exec failonerror="true" executable="/opt/zimbra/bin/zmsshkeygen"/>
  </target>

  <target name="jar" depends="compile,zimbra-jar,zimbra-identity" description="Creates the jar"/>
</project>
